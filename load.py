import tkinter as tk
from tkinter import messagebox, Toplevel, ttk
from PIL import Image, ImageTk
import joblib
import os

# === H√†m d·ª± ƒëo√°n v·ªõi m√¥ h√¨nh Random Forest ===
def predict_phishing():
    try:
        missing_features = []
        features = []

        # L·∫•y gi√° tr·ªã t·ª´ c√°c combobox
        for i, combobox in enumerate(comboboxes):
            value = combobox.get()
            if value:
                features.append(int(value.split("(")[1].strip(")").strip()) + 1)
            else:
                # N·∫øu kh√¥ng c√≥ gi√° tr·ªã, m·∫∑c ƒë·ªãnh l√† k·∫øt qu·∫£ x·∫•u
                features.append(0)
                missing_features.append(features_list[i][0])

        # Load m√¥ h√¨nh Random Forest
        rf_model = joblib.load("random_forest_model.pkl")

        # D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh
        prediction_rf = rf_model.predict([features])[0]

        # T·∫°o th√¥ng b√°o k·∫øt qu·∫£
        result_message = "üîç K·∫øt qu·∫£ d·ª± ƒëo√°n:\n\n"
        result_message += f"üìå Random Forest: {'KH√îNG L·ª™A ƒê·∫¢O ‚úÖ' if prediction_rf == 2 else 'L·ª™A ƒê·∫¢O ‚ö†Ô∏è'}\n"

        if missing_features:
            result_message += "\n‚ö†Ô∏è C√°c thu·ªôc t√≠nh thi·∫øu (m·∫∑c ƒë·ªãnh k·∫øt qu·∫£ x·∫•u):\n"

        # T·∫°o c·ª≠a s·ªï th√¥ng b√°o l·ªõn h∆°n
        result_window = Toplevel(root)
        result_window.title("K·∫øt qu·∫£ d·ª± ƒëo√°n")
        result_window.geometry("500x300")

        label = tk.Label(result_window, text=result_message, font=("Arial", 14), justify="left")
        label.pack(padx=20, pady=20)

        close_button = ttk.Button(result_window, text="ƒê√≥ng", command=result_window.destroy)
        close_button.pack(pady=10)

    except Exception as e:
        messagebox.showerror("L·ªói", str(e))

# === Giao di·ªán Tkinter ===
root = tk.Tk()
root.title("D·ª± ƒëo√°n trang web l·ª´a ƒë·∫£o")

# T·∫°o ki·ªÉu v·ªõi font l·ªõn
style = ttk.Style()
style.configure("Large.TButton", font=("Arial", 16))
style.configure("Large.TLabel", font=("Arial", 14))
style.configure("Large.TCombobox", font=("Arial", 14))

# Danh s√°ch c√°c c√¢u h·ªèi v√† gi√° tr·ªã (ƒë√£ tƒÉng l√™n 1 ƒë∆°n v·ªã)
features_list = [
    ("URL ch·ª©a ƒë·ªãa ch·ªâ IP?", ["Kh√¥ng (2)", "C√≥ (0)"]),
    ("ƒê·ªô d√†i URL?", ["Ng·∫Øn (2)", "Trung b√¨nh (1)", "D√†i (0)"]),
    ("D√πng d·ªãch v·ª• r√∫t g·ªçn URL?", ["Kh√¥ng (2)", "C√≥ (0)"]),
    ("URL c√≥ k√Ω t·ª± @?", ["Kh√¥ng (2)", "C√≥ (0)"]),
    ("C√≥ // b·∫•t th∆∞·ªùng?", ["Kh√¥ng (2)", "C√≥ (0)"]),
    ("T√™n mi·ªÅn c√≥ d·∫•u -?", ["Kh√¥ng (2)", "C√≥ (0)"]),
    ("S·ªë subdomain?", ["√çt (2)", "Trung b√¨nh (1)", "Nhi·ªÅu (0)"]),
    ("Tr·∫°ng th√°i SSL?", ["H·ª£p l·ªá (2)", "Kh√¥ng r√µ (1)", "Kh√¥ng h·ª£p l·ªá (0)"]),
    ("Th·ªùi gian ƒëƒÉng k√Ω?", ["D√†i (2)", "Ng·∫Øn (0)"]),
    ("Ngu·ªìn favicon?", ["C√πng mi·ªÅn (2)", "Kh√°c (0)"]),
    ("C·ªïng k·∫øt n·ªëi?", ["Chu·∫©n (2)", "B·∫•t th∆∞·ªùng (0)"]),
    ("T√™n mi·ªÅn c√≥ 'https'?", ["Kh√¥ng (2)", "C√≥ (0)"]),
    ("Ngu·ªìn n·ªôi dung?", ["C√πng mi·ªÅn (2)", "Kh√°c (0)"]),
    ("C√°c li√™n k·∫øt trong trang tr·ªè ƒë·∫øn?", ["C√πng trang (2)", "M·ªôt s·ªë kh√°c (1)", "Nhi·ªÅu trang kh√°c (0)"]),
    ("Th·∫ª script/link?", ["C√πng trang (2)", "M·ªôt s·ªë kh√°c (1)", "Nhi·ªÅu kh√°c (0)"]),
    ("X·ª≠ l√Ω form?", ["C√πng mi·ªÅn (2)", "Kh√¥ng r√µ (1)", "Kh√°c (0)"]),
    ("G·ª≠i th·∫≥ng email?", ["Kh√¥ng (2)", "C√≥ (0)"]),
    ("URL kh·ªõp t√™n mi·ªÅn?", ["C√≥ (2)", "Kh√¥ng (0)"]),
    ("S·ªë chuy·ªÉn h∆∞·ªõng?", ["Nhi·ªÅu (2)", "√çt (1)"]),
    ("Thay ƒë·ªïi khi hover?", ["Kh√¥ng (2)", "C√≥ (0)"]),
    ("Cho ph√©p chu·ªôt ph·∫£i?", ["C√≥ (2)", "Kh√¥ng (0)"]),
    ("C·ª≠a s·ªï popup?", ["Kh√¥ng (2)", "C√≥ (0)"]),
    ("D√πng iframe ·∫©n?", ["Kh√¥ng (2)", "C√≥ (0)"]),
    ("Tu·ªïi t√™n mi·ªÅn?", ["C≈© (2)", "M·ªõi (0)"]),
    ("DNS h·ª£p l·ªá?", ["C√≥ (2)", "Kh√¥ng (0)"]),
    ("L∆∞u l∆∞·ª£ng truy c·∫≠p?", ["Cao (2)", "Trung b√¨nh (1)", "Th·∫•p (0)"]),
    ("PageRank?", ["Cao (2)", "Th·∫•p (0)"]),
    ("Google Index?", ["C√≥ (2)", "Kh√¥ng (0)"]),
    ("C√°c trang web kh√°c li√™n k·∫øt tr·ªè ƒë·∫øn trang n√†y?", ["Nhi·ªÅu (2)", "M·ªôt s·ªë (1)", "√çt (0)"]),
    ("Trong danh s√°ch phishing?", ["Kh√¥ng (2)", "C√≥ (0)"])
]

comboboxes = []

# T·∫°o frame ch·ª©a n·ªôi dung ch√≠nh v·ªõi thanh cu·ªôn
canvas = tk.Canvas(root)
scrollbar = ttk.Scrollbar(root, orient="vertical", command=canvas.yview)
scrollable_frame = ttk.Frame(canvas)

scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)

for i in range(0, len(features_list), 2):
    row = i // 2
    question_left, options_left = features_list[i]

    ttk.Label(scrollable_frame, text=question_left, style="Large.TLabel").grid(row=row, column=0, padx=20, pady=5, sticky="w")
    combo_left = ttk.Combobox(scrollable_frame, values=options_left, state="readonly", width=25, style="Large.TCombobox")
    combo_left.grid(row=row, column=1, padx=20, pady=5, sticky="w")
    comboboxes.append(combo_left)

    if i + 1 < len(features_list):
        question_right, options_right = features_list[i + 1]

        ttk.Label(scrollable_frame, text=question_right, style="Large.TLabel").grid(row=row, column=3, padx=20, pady=5, sticky="w")
        combo_right = ttk.Combobox(scrollable_frame, values=options_right, state="readonly", width=25, style="Large.TCombobox")
        combo_right.grid(row=row, column=4, padx=20, pady=5, sticky="w")
        comboboxes.append(combo_right)

canvas.pack(side="top", fill="both", expand=True)
scrollbar.pack(side="right", fill="y")

predict_btn = ttk.Button(root, text="üöÄ D·ª± ƒëo√°n", command=predict_phishing, style="Large.TButton")
predict_btn.pack(pady=20)

root.mainloop()
